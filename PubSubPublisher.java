package com.homedepot.di.dc.osc.commons.pubsub;

import brave.Tracer;
import com.google.api.core.ApiFuture;
import com.google.api.core.ApiFutureCallback;
import com.google.api.core.ApiFutures;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.pubsub.v1.Publisher;
import com.google.pubsub.v1.PubsubMessage;
import com.google.pubsub.v1.TopicName;
import com.homedepot.di.dc.osc.commons.config.MetricsHelper;
import com.homedepot.di.dc.osc.commons.exception.InvalidHdwMessageException;
import com.homedepot.di.dc.osc.commons.exception.PubSubPublisherUnavailableException;
import com.homedepot.di.dc.osc.commons.pubsub.hdwmessage.HDWPubSubConverter;
import com.homedepot.di.dc.osc.commons.pubsub.hdwmessage.HdwCommonMessage;
import com.homedepot.di.dc.osc.commons.pubsub.hdwmessage.HdwPubSubMessage;
import com.homedepot.di.dc.osc.commons.spanner.GoogleCloudProperties;
import com.homedepot.di.dc.osc.commons.stackdriver.StackDriverErrorReportingHelper;
import io.micrometer.core.instrument.Metrics;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.Optional;

import static com.google.common.util.concurrent.MoreExecutors.directExecutor;

@Service
@ConditionalOnProperty(name = "google.cloud.pubsub.topic.name")
public class PubSubPublisher {

    private static final Logger LOGGER = LoggerFactory.getLogger(PubSubPublisher.class);
    private static final String DEFAULT_NO_TRACE_ID = "NONE";

    private PubSubSetup pubSubSetup;
    private GoogleCloudProperties googleCloudConfig;
    private PubSubMessageRepository messageRepository;
    private Publisher publisher;
    private Tracer tracer;
    private TransportChannelProvider emulatorTransportChannelProvider;
    private CredentialsProvider emulatorCredentialsProvider;
    private HDWPubSubConverter hdwPubSubData;


    @Autowired
    public PubSubPublisher(PubSubSetup pubSubSetup, GoogleCloudProperties googleCloudConfig,
                           PubSubMessageRepository messageRepository, Tracer tracer,
                           Optional<TransportChannelProvider> transportChannelProvider,
                           Optional<CredentialsProvider> credentialsProvider,
                           HDWPubSubConverter hdwPubSubData) {
        this.pubSubSetup = pubSubSetup;
        this.googleCloudConfig = googleCloudConfig;
        this.messageRepository = messageRepository;
        this.tracer = tracer;
        this.emulatorTransportChannelProvider = transportChannelProvider.orElse(null);
        this.emulatorCredentialsProvider = credentialsProvider.orElse(null);
        this.hdwPubSubData = hdwPubSubData;
    }

    /**
     * Initialize Pub/Sub publisher immediately after construction.
     * If the publisher cannot be created, the service should fail immediately to ensure that
     * no requests are accepted without being published.
     *
     * @throws PubSubPublisherUnavailableException
     */
    @PostConstruct
    protected void postConstruct() throws PubSubPublisherUnavailableException {
        this.publisher = newPublisher();
    }

    @PreDestroy
    public void preDestroy() {
        if (publisher != null) {
            try {
                publisher.shutdown();
            } catch (Exception e) {
                StackDriverErrorReportingHelper.logCustomErrorEvent(e);
                LOGGER.error(e.getMessage(), e);
            }
        }
    }

    /**
     * Example of how we can structure our payloads:
     * <pre>
     * 	payload = {
     * 	   "attributes": [
     * // Timestamp generated by event producer, allows consumers to reorder events that may arrive out of order
     * "createdTime": 1914911923123,
     * // Used for tracing messages through the system
     * "traceId": "6d5533ce-aa34-4847-9af2-05932ca3c04b"
     * // Any breaking changes to the payload model should result in a
     * "apiVersion": 1,
     * // Clients can use the 'entity' attribute when unmarshalling the payload
     * "entity": "order",
     * // Allows multiple event types to be passed through a single topic
     * "action": "create"
     * ],
     * 	  // Base 64 encoded ORDER 'create' model
     * 	  "data": "..."
     *    }
     * </pre>
     */
    public void publish(HdwCommonMessage hdwCommonMessage) throws PubSubPublisherUnavailableException, InvalidHdwMessageException {
        PubsubMessage jwtMessage;

        try {
            jwtMessage = hdwPubSubData.encode(hdwCommonMessage);
        } catch (Exception ex) {
            LOGGER.error(MessageFormat.format("Publisher error {0} Payload {1}", ex.getMessage(), hdwCommonMessage.toString()), ex);
            throw new InvalidHdwMessageException("Publisher error: " + ex.getMessage(), ex);
        }

        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Publishing: ENTITY - {} , ACTION - {} , APIVERSION - {}, DCNUMBER - {}, DATA - {},  AUTHTOKEN - {}",
                hdwCommonMessage.getEntity(), hdwCommonMessage.getAction(), hdwCommonMessage.getApiVersion(),
                hdwCommonMessage.getDcNumber(), hdwCommonMessage.getData(), hdwCommonMessage.getOscAuthToken());
        }

        publishMessage(jwtMessage);
    }

    public void publish(HdwPubSubMessage hdwPubSubMessage) throws PubSubPublisherUnavailableException, InvalidHdwMessageException {
        PubsubMessage jwtMessage = hdwPubSubData.encode(hdwPubSubMessage);
        LOGGER.debug("Publishing: action {} data {} apiVerion {} dcNumber {} Auth token",
                hdwPubSubMessage.getAction(), hdwPubSubMessage.getAction(),
                hdwPubSubMessage.getApiVersion(), hdwPubSubMessage.getDcNumber(), hdwPubSubMessage.getOscAuthToken());
        publishMessage(jwtMessage);
    }

    public void publishMessage(PubsubMessage pubsubMessage) throws PubSubPublisherUnavailableException, InvalidHdwMessageException {
        if (publisher == null) {
            try {
                publisher = newPublisher();
            } catch (PubSubPublisherUnavailableException e) {
                LOGGER.error(e.getMessage(), e);
                StackDriverErrorReportingHelper.logCustomErrorEvent(e);
                messageRepository.addMessage(pubsubMessage);
                throw e;
            }
        }

        publish(pubsubMessage);

        messageRepository.consumeAll(this::publish);
    }

    private void publish(PubsubMessage message) {

        ApiFuture<String> future = publisher.publish(message);

        ApiFutures.addCallback(future, new ApiFutureCallback<String>() {

            @Override
            public void onSuccess(String messageId) {
                if (LOGGER.isDebugEnabled()) {

                    LOGGER.debug("TraceId: {} Pub/Sub message {} published",
                            message.getAttributesOrDefault("traceId", DEFAULT_NO_TRACE_ID),
                            messageId);
                }
                Metrics.counter("pubsub_send_counter", MetricsHelper.getPubsubTagsByHdwMessage(message)).increment();
            }

            @Override
            public void onFailure(Throwable t) {
                LOGGER.error(t.getMessage(), t);
                StackDriverErrorReportingHelper.logCustomErrorEvent(new PubSubPublisherUnavailableException(t.getMessage(), t));
                messageRepository.addMessage(message);
                Metrics.counter("pubsub_send_fail_counter", MetricsHelper.getPubsubTagsByHdwMessage(message)).increment();
            }

        }, directExecutor());

    }

    protected Publisher newPublisher() throws PubSubPublisherUnavailableException {
        Publisher result = null;
        TopicName topicName = pubSubSetup.getOrCreateTopic(
                googleCloudConfig.getPubsub().getTopic().getName(),
                googleCloudConfig.getPubsub().getTopic().isForce());
        try {
            result = newPublisher(topicName);
            LOGGER.info("Connected publisher to Topic ({}) in GCP", topicName);
        } catch (IOException e) {
            StackDriverErrorReportingHelper.logCustomErrorEvent(e);
            LOGGER.error(e.getMessage(), e);
            throw new PubSubPublisherUnavailableException("Error creating a publisher for " + topicName, e);

        }
        return result;
    }

    public Publisher newPublisher(TopicName topicName) throws IOException {
        /*
         * What: Single line of code extracted to easily create unit tests that need to throw IOException on build().
         * Why: Publisher.Builder class is final, so it can't be mocked.
         */
        if (StringUtils.isBlank(googleCloudConfig.getPubsub().getPubSubEmulatorHost())) {
            return Publisher.newBuilder(topicName).build();
        } else {
            return Publisher.newBuilder(topicName)
                    .setChannelProvider(this.emulatorTransportChannelProvider)
                    .setCredentialsProvider(this.emulatorCredentialsProvider)
                    .build();
        }

    }

    public Tracer getTracer() {
        return tracer;
    }

    public void setTracer(Tracer tracer) {
        this.tracer = tracer;
    }

}
